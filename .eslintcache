[{"C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\index.js":"1","C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\reportWebVitals.js":"2","C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\App.js":"3","C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\components\\SortingVisual.js":"4","C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\algorithms\\algorithms.js":"5","C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\components\\Layout.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":235,"mtime":1611605957453,"results":"10","hashOfConfig":"8"},{"size":4297,"mtime":1611605855873,"results":"11","hashOfConfig":"8"},{"size":3447,"mtime":1611292654614,"results":"12","hashOfConfig":"8"},{"size":159,"mtime":1611606017970,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wofyxp",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\index.js",[],["29","30"],"C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\App.js",["31"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./styles/style.sass\";\n\nimport Layout from \"./components/Layout\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\components\\SortingVisual.js",["32","33","34"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport * as sortingAlgs from \"../algorithms/algorithms\";\r\n\r\nconst SortingVisual = (props) => {\r\n  const [array, setArray] = useState([]);\r\n  const [sorting, setSorting] = useState(false);\r\n  const containerRef = useRef(null);\r\n  const [width, setWidth] = React.useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    initialArray();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n\r\n    function handleResize() {\r\n      setWidth(window.innerWidth);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n  const initialArray = () => {\r\n    clearInterval();\r\n    const array = [];\r\n    for (let i = 0; i < width / 20; i++) {\r\n      array.push(randomInt(1, 500));\r\n    }\r\n\r\n    setArray(array);\r\n  };\r\n\r\n  const mergeSort = () => {\r\n    const animations = sortingAlgs.mergeSort(array);\r\n    animateSortingArray(animations);\r\n  };\r\n\r\n  const bubbleSort = () => {\r\n    const animations = sortingAlgs.bubbleSort(array);\r\n    animateSortingArray(animations);\r\n  };\r\n\r\n  const quickSort = () => {\r\n    const animations = sortingAlgs.quickSort(array);\r\n    animateSortingArray(animations);\r\n  };\r\n\r\n  const insertSort = () => {\r\n    const animations = sortingAlgs.insertionSort(array);\r\n    animateSortingArray(animations);\r\n  };\r\n  const animateSortingArray = (animations) => {\r\n    console.log(sorting);\r\n    if (!sorting) {\r\n      setSorting(true);\r\n      animations.forEach(([comparison, swapped], i) => {\r\n        setTimeout(() => {\r\n          if (!swapped) {\r\n            if (comparison.length === 2) {\r\n              animateArrayAccess(comparison[0]);\r\n              animateArrayAccess(comparison[1]);\r\n            } else {\r\n              animateArrayAccess(comparison[0]);\r\n            }\r\n          } else {\r\n            setArray((prev) => {\r\n              const [k, newValue] = comparison;\r\n              const newArray = [...prev];\r\n              newArray[k] = newValue;\r\n              return newArray;\r\n            });\r\n          }\r\n        }, i * 5);\r\n        setTimeout(() => setSorting(false), 5 * animations.length);\r\n      });\r\n    }\r\n  };\r\n  const animateArrayAccess = (index) => {\r\n    const arrayBars = containerRef.current.children;\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = \"red\";\r\n    }, 1);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = \"\";\r\n    }, 5 * 2);\r\n  };\r\n\r\n  //   const testAlg = () => {\r\n  //     for (let i = 0; i < 100; i++) {\r\n  //       const arr = [];\r\n  //       const len = randomInt(1, 1000);\r\n  //       for (let i = 0; i < len; i++) {\r\n  //         arr.push(randomInt(-1000, 1000));\r\n  //       }\r\n  //       const bubSort = sortingAlgs.mergeSort([...arr]);\r\n  //       const javaScript = arr.sort((a, b) => a - b);\r\n  //       console.log(arraysAreEqual(javaScript, bubSort));\r\n  //     }\r\n  //   };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"array\" ref={containerRef}>\r\n        {array.map((val, i) => (\r\n          <div className=\"array__bar\" key={i} style={{ height: `${val}px` }} />\r\n        ))}\r\n      </div>\r\n      <button disabled={sorting} onClick={initialArray}>\r\n        New Array\r\n      </button>\r\n      <button disabled={sorting} onClick={mergeSort}>\r\n        Merge Sort\r\n      </button>\r\n      <button disabled={sorting} onClick={bubbleSort}>\r\n        Bubble Sort\r\n      </button>\r\n      <button disabled={sorting} onClick={quickSort}>\r\n        Quick Sort\r\n      </button>\r\n      <button disabled={sorting} onClick={insertSort}>\r\n        Insert Sort\r\n      </button>\r\n      {/* <button disabled={sorting} onClick={testAlg}>\r\n        Test\r\n      </button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nSortingVisual.propTypes = {};\r\n\r\n// https://www.w3schools.com/js/js_random.asp\r\nconst randomInt = (min, max) =>\r\n  Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nconst arraysAreEqual = (arr1, arr2) => {\r\n  if (arr1.length !== arr2.length) return false;\r\n  for (let i = 0; i < arr1.length; i++) {\r\n    if (arr1[i] !== arr2[i]) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default SortingVisual;\r\n","C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\algorithms\\algorithms.js",[],"C:\\Users\\LetsPlay\\Desktop\\code\\react\\sorting_visualizer\\src\\components\\Layout.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":12},{"ruleId":"39","severity":1,"message":"43","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":17},{"ruleId":"44","severity":1,"message":"45","line":14,"column":6,"nodeType":"46","endLine":14,"endColumn":8,"suggestions":"47"},{"ruleId":"39","severity":1,"message":"48","line":143,"column":7,"nodeType":"41","messageId":"42","endLine":143,"endColumn":21},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialArray'. Either include it or remove the dependency array.","ArrayExpression",["51"],"'arraysAreEqual' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"52","fix":"53"},"Update the dependencies array to be: [initialArray]",{"range":"54","text":"55"},[440,442],"[initialArray]"]