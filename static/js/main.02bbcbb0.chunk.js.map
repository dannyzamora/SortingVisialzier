{"version":3,"sources":["logo.svg","algorithms/algorithms.js","components/SortingVisual.js","components/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["sortQuick","arr","p","r","animations","q","randomizedPartition","min","max","i","Math","floor","random","swap","x","push","j","partition","temp","sortMerge","merge","n1","n2","L","R","Infinity","k","randomInt","SortingVisual","props","useState","array","setArray","sorting","setSorting","containerRef","useRef","React","window","innerWidth","width","setWidth","useEffect","initialArray","handleResize","addEventListener","removeEventListener","clearInterval","animateSortingArray","console","log","forEach","comparison","swapped","setTimeout","prev","newValue","newArray","length","animateArrayAccess","index","arrayBarStyle","current","children","style","backgroundColor","className","ref","map","val","height","disabled","onClick","copy","sortingAlgs","len","tmp","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02bbcbb0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// BubbleSort-------------------------------\r\nexport const bubbleSort = (array) => {\r\n  const copy = [...array];\r\n  const animations = [];\r\n  let len = copy.length; // [1,2]\r\n  for (let i = 0; i < len; i++) {\r\n    for (let j = 0; j < len - i - 1; j++) {\r\n      animations.push([[j, j + 1], false]);\r\n\r\n      if (copy[j] > copy[j + 1]) {\r\n        let tmp = copy[j];\r\n        copy[j] = copy[j + 1];\r\n        animations.push([[j, copy[j]], true]);\r\n        copy[j + 1] = tmp;\r\n        animations.push([[j + 1, tmp], true]);\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n};\r\n//-------------------------------------------\r\n//QuickSort(randomized)\r\n\r\nexport const quickSort = (array) => {\r\n  const copy = [...array];\r\n  const animations = [];\r\n  sortQuick(copy, 0, copy.length - 1, animations);\r\n  return animations;\r\n};\r\n\r\nconst sortQuick = (arr, p, r, animations) => {\r\n  if (p < r) {\r\n    const q = randomizedPartition(arr, p, r, animations);\r\n    sortQuick(arr, p, q - 1, animations);\r\n    sortQuick(arr, q + 1, r, animations);\r\n  }\r\n};\r\n\r\nconst partition = (arr, p, r, animations) => {\r\n  const x = arr[r];\r\n  animations.push([[r], false]);\r\n  let i = p - 1;\r\n  for (let j = p; j <= r - 1; j++) {\r\n    if (arr[j] <= x) {\r\n      i++;\r\n      swap(arr, i, j, animations);\r\n    }\r\n  }\r\n  swap(arr, i + 1, r, animations);\r\n  return i + 1;\r\n};\r\nconst randomizedPartition = (arr, p, r, animations) => {\r\n  const i = getRndInteger(p, r);\r\n  swap(arr, r, i, animations);\r\n  return partition(arr, p, r, animations);\r\n};\r\nconst swap = (arr, i, j, animations) => {\r\n  const temp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = temp;\r\n  animations.push([[i, arr[i]], true]);\r\n  animations.push([[j, arr[j]], true]);\r\n};\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\n//----------------------------------------------------\r\n//--------insertions Sort\r\nexport const insertionSort = (array) => {\r\n  const copy = [...array];\r\n  const animations = [];\r\n  for (let j = 1; j < copy.length; j++) {\r\n    const k = copy[j];\r\n    let i = j - 1;\r\n    animations.push([[i, j], false]);\r\n\r\n    while (i >= 0 && copy[i] > k) {\r\n      copy[i + 1] = copy[i];\r\n      animations.push([[i + 1, copy[i + 1]], true]);\r\n      animations.push([[i, j], false]);\r\n\r\n      i--;\r\n    }\r\n    copy[i + 1] = k;\r\n    animations.push([[i + 1, copy[i + 1]], true]);\r\n  }\r\n  return animations;\r\n};\r\n//------------------------------------------------------\r\n//mergesort\r\n\r\nexport const mergeSort = (array) => {\r\n  const copy = [...array];\r\n  const animations = [];\r\n  sortMerge(copy, 0, copy.length - 1, animations);\r\n  return animations;\r\n};\r\n\r\nconst sortMerge = (arr, p, r, animations) => {\r\n  if (p < r) {\r\n    const q = Math.floor(p + (r - p) / 2);\r\n    sortMerge(arr, p, q, animations);\r\n    sortMerge(arr, q + 1, r, animations);\r\n    merge(arr, p, q, r, animations);\r\n  }\r\n};\r\nconst merge = (arr, p, q, r, animations) => {\r\n  const n1 = q - p + 1;\r\n  const n2 = r - q;\r\n  const L = [];\r\n  const R = [];\r\n  for (let i = 0; i < n1; i++) {\r\n    L.push(arr[p + i]);\r\n  }\r\n  for (let j = 0; j < n2; j++) {\r\n    R.push(arr[q + j + 1]);\r\n  }\r\n  L.push(Infinity);\r\n  R.push(Infinity);\r\n  let i = 0;\r\n  let j = 0;\r\n\r\n  for (let k = p; k <= r; k++) {\r\n    animations.push([[k], false]);\r\n\r\n    if (L[i] <= R[j]) {\r\n      arr[k] = L[i];\r\n      i++;\r\n    } else {\r\n      arr[k] = R[j];\r\n      j++;\r\n    }\r\n    animations.push([[k, arr[k]], true]);\r\n  }\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport * as sortingAlgs from \"../algorithms/algorithms\";\r\n\r\nconst SortingVisual = (props) => {\r\n  const [array, setArray] = useState([]);\r\n  const [sorting, setSorting] = useState(false);\r\n  const containerRef = useRef(null);\r\n  const [width, setWidth] = React.useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    initialArray();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n\r\n    function handleResize() {\r\n      setWidth(window.innerWidth);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n  const initialArray = () => {\r\n    clearInterval();\r\n    const array = [];\r\n    for (let i = 0; i < width / 20; i++) {\r\n      array.push(randomInt(1, 500));\r\n    }\r\n\r\n    setArray(array);\r\n  };\r\n\r\n  const mergeSort = () => {\r\n    const animations = sortingAlgs.mergeSort(array);\r\n    animateSortingArray(animations);\r\n  };\r\n\r\n  const bubbleSort = () => {\r\n    const animations = sortingAlgs.bubbleSort(array);\r\n    animateSortingArray(animations);\r\n  };\r\n\r\n  const quickSort = () => {\r\n    const animations = sortingAlgs.quickSort(array);\r\n    animateSortingArray(animations);\r\n  };\r\n\r\n  const insertSort = () => {\r\n    const animations = sortingAlgs.insertionSort(array);\r\n    animateSortingArray(animations);\r\n  };\r\n  const animateSortingArray = (animations) => {\r\n    console.log(sorting);\r\n    if (!sorting) {\r\n      setSorting(true);\r\n      animations.forEach(([comparison, swapped], i) => {\r\n        setTimeout(() => {\r\n          if (!swapped) {\r\n            if (comparison.length === 2) {\r\n              animateArrayAccess(comparison[0]);\r\n              animateArrayAccess(comparison[1]);\r\n            } else {\r\n              animateArrayAccess(comparison[0]);\r\n            }\r\n          } else {\r\n            setArray((prev) => {\r\n              const [k, newValue] = comparison;\r\n              const newArray = [...prev];\r\n              newArray[k] = newValue;\r\n              return newArray;\r\n            });\r\n          }\r\n        }, i * 5);\r\n        setTimeout(() => setSorting(false), 5 * animations.length);\r\n      });\r\n    }\r\n  };\r\n  const animateArrayAccess = (index) => {\r\n    const arrayBars = containerRef.current.children;\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = \"red\";\r\n    }, 1);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = \"\";\r\n    }, 5 * 2);\r\n  };\r\n\r\n  //   const testAlg = () => {\r\n  //     for (let i = 0; i < 100; i++) {\r\n  //       const arr = [];\r\n  //       const len = randomInt(1, 1000);\r\n  //       for (let i = 0; i < len; i++) {\r\n  //         arr.push(randomInt(-1000, 1000));\r\n  //       }\r\n  //       const bubSort = sortingAlgs.mergeSort([...arr]);\r\n  //       const javaScript = arr.sort((a, b) => a - b);\r\n  //       console.log(arraysAreEqual(javaScript, bubSort));\r\n  //     }\r\n  //   };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"array\" ref={containerRef}>\r\n        {array.map((val, i) => (\r\n          <div className=\"array__bar\" key={i} style={{ height: `${val}px` }} />\r\n        ))}\r\n      </div>\r\n      <button disabled={sorting} onClick={initialArray}>\r\n        New Array\r\n      </button>\r\n      <button disabled={sorting} onClick={mergeSort}>\r\n        Merge Sort\r\n      </button>\r\n      <button disabled={sorting} onClick={bubbleSort}>\r\n        Bubble Sort\r\n      </button>\r\n      <button disabled={sorting} onClick={quickSort}>\r\n        Quick Sort\r\n      </button>\r\n      <button disabled={sorting} onClick={insertSort}>\r\n        Insert Sort\r\n      </button>\r\n      {/* <button disabled={sorting} onClick={testAlg}>\r\n        Test\r\n      </button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nSortingVisual.propTypes = {};\r\n\r\n// https://www.w3schools.com/js/js_random.asp\r\nconst randomInt = (min, max) =>\r\n  Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nconst arraysAreEqual = (arr1, arr2) => {\r\n  if (arr1.length !== arr2.length) return false;\r\n  for (let i = 0; i < arr1.length; i++) {\r\n    if (arr1[i] !== arr2[i]) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default SortingVisual;\r\n","import React from \"react\";\r\nimport SortingVisual from \"./SortingVisual\";\r\n\r\nconst Layout = () => {\r\n  return <SortingVisual />;\r\n};\r\n\r\nexport default Layout;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./styles/style.sass\";\n\nimport Layout from \"./components/Layout\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}